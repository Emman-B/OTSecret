{"version":3,"sources":["components/CreateSecret.js","components/RedirectToID.js","routes/HomeRoute.js","components/GetSecret.js","routes/GetSecretRoute.js","App.js","reportWebVitals.js","index.js"],"names":["CreateSecret","useState","newID","setNewID","loading","setLoading","passwordRef","useRef","messageRef","className","maxLength","ref","type","disabled","onClick","e","preventDefault","axios","post","backendURL","password","current","value","message","then","response","data","id","catch","err","finally","newURL","window","location","href","navigator","clipboard","writeText","showIDComponent","RedirectToID","idRef","history","useHistory","title","match","push","alert","HomeRoute","GetSecret","props","secretMessage","setSecretMessage","to","GetSecretRoute","params","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5fca52f.chunk.js","sourcesContent":["import './CreateSecret.css';\nimport { useRef, useState } from \"react\";\nimport axios from 'axios';\nimport { backendURL } from \"../App\";\n\n\nexport default function CreateSecret() {\n    const [newID, setNewID] = useState();\n    const [loading, setLoading] = useState(false);\n\n    const passwordRef = useRef();\n    const messageRef = useRef();\n\n    const makeSecret = () => {\n        setLoading(true);\n        axios.post(`${backendURL}/v1/secret`, {password: passwordRef.current.value, message: messageRef.current.value})\n            .then((response) => {\n                // success\n                setNewID(response.data.id);\n                passwordRef.current.value = '';\n                messageRef.current.value = '';\n            })\n            .catch((err) => {\n                // failure\n                setNewID(null);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }\n\n    const showIDComponent = () => {\n        if (newID) {\n            const newURL = `${window.location.href}${newID}`;\n\n            // function for copying the url to clipboard\n            const copyToClipboard = () => {\n                navigator.clipboard.writeText(newURL);\n            };\n\n            return (\n                <>\n                    <span>Give this URL to the recipient: </span>\n                    <a href={newURL}>{newURL}</a>\n                    <button type='button' onClick={() => copyToClipboard()}>Copy to Clipboard</button>\n                </>\n            );\n        } else if (newID === null) {\n            // error case\n            return <span>failure</span>\n        } else {\n            return <span></span>\n        }\n    }\n\n    return (\n        <div className='create-secret app-outer-panel'>\n            <form className='create-form app-panel'>\n                <h4>If you want to create a secret...</h4>\n                <label>Secret message (1-100 characters)</label>\n                <textarea maxLength={100} ref={messageRef} type='text'></textarea>\n                <label>Password for secret (3-64 chars)</label>\n                <input ref={passwordRef} type='password'></input>\n                <button disabled={loading} type='submit' onClick={(e) => {\n                    e.preventDefault(); // prevents a refresh\n                    makeSecret();\n                }}>{!loading?'Create Secret':'Creating Secret...'}</button>\n\n                {showIDComponent()}\n            </form>\n        </div>\n    );\n}","import './RedirectToID.css';\nimport { useHistory } from 'react-router-dom';\nimport { useRef } from 'react';\n\nexport default function RedirectToID() {\n    const idRef = useRef();\n    const history = useHistory();\n\n    const idHelperTooltipContent = 'If you were given a URL, the ID of the secret' +\n            ' is the last part of the URL containing letters and numbers. For example,' +\n            ' a URL ending with \"/abc123\" would have the ID of abc123.'\n\n    return (\n        <div className='redirect-to-id app-outer-panel'>\n            <form className='redirect-id-form app-panel'>\n                <h4>If you have an ID of the secret...</h4>\n                <label title={idHelperTooltipContent}>Enter ID of secret</label>\n                <input type='text' title='Only letters and numbers' ref={idRef}></input>\n                <button onClick={(e) => {\n                    e.preventDefault();\n                    // input validation, only allow alphanumeric\n                    if (idRef.current.value.match(/^[a-zA-Z0-9]+$/i)) {\n                        history.push(`/${idRef.current.value}`);\n                    } else {\n                        window.alert('This is not an ID. The ID of a secret only contains letters and numbers.');\n                    }\n\n                }}>Go to ID</button>\n            </form>\n        </div>\n    );\n}","import CreateSecret from \"../components/CreateSecret\";\nimport RedirectToID from \"../components/RedirectToID\";\n\n\nexport default function HomeRoute() {\n    return (\n        <div className='app-panels-container'>\n            <CreateSecret />\n            <RedirectToID />\n        </div>\n    );\n}","import axios from \"axios\";\nimport { useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { backendURL } from \"../App\";\n\nexport default function GetSecret(props) {\n    const [secretMessage, setSecretMessage] = useState(<div></div>);\n    const [loading, setLoading] = useState(false);\n\n    const id = props.id;\n\n    const passwordRef = useRef();\n\n    const handlePasswordSubmit = () => {\n        setLoading(true);\n        axios.post(`${backendURL}/v1/secret/${id}`, {password: passwordRef.current.value})\n            .then((response) => {\n                setSecretMessage(<div>Secret message: {response.data.message}</div>)\n            })\n            .catch(() => {\n                setSecretMessage(<div>Failed</div>);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <form>\n            <Link to='/'>Go back</Link>\n            <br></br>\n            <label>Please enter in a password for secret ID: {id}</label>\n\n            <br></br>\n            <input type='password' ref={passwordRef}></input>\n\n            <button disabled={loading} type='submit' onClick={(e) => {\n                e.preventDefault(); // prevents a refresh\n                handlePasswordSubmit()\n            }}>{!loading?'Submit':'Loading...'}</button>\n\n            {secretMessage}\n        </form>\n    );\n}","\nimport GetSecret from \"../components/GetSecret\";\n\nexport default function GetSecretRoute(props) {\n    // pass in the id from the path parameter\n    const id = props.match.params.id;\n\n    return (\n        <GetSecret id={id} />\n    );\n}","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\n// import routes\nimport HomeRoute from './routes/HomeRoute';\nimport GetSecretRoute from './routes/GetSecretRoute';\n\n// define the backend server depending on node environment\nexport const backendURL = (process.env.NODE_ENV === 'development')?\n    `http://localhost:3010`:`https://otsecret.herokuapp.com`;\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className='app-body'>\n                \n                {/* Header */}\n                <header className='app-header'>\n                    <h1 className='app-title'>OTSecret</h1>\n                    <h2 className='app-subtitle'>A way to send temporary secrets!</h2>\n                </header>\n\n                {/* Routes */}\n                <div className='app-content'>\n                    <Switch>\n                        <Route exact path='/'>\n                            <HomeRoute />\n                        </Route>\n                        <Route path='/:id' component={GetSecretRoute}>\n                        </Route>\n                    </Switch>\n                </div>\n\n                \n                {/* Footer */}\n                <footer className='app-footer'>\n                    <span>Created by Emmanuel Butor</span>\n                </footer>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/CreateSecret.js","components/HowItWorks.js","components/RedirectToID.js","routes/HomeRoute.js","components/GetSecret.js","routes/GetSecretRoute.js","App.js","reportWebVitals.js","index.js"],"names":["CreateSecret","useState","newID","setNewID","loading","setLoading","passwordRef","useRef","messageRef","className","maxLength","ref","type","placeholder","disabled","onClick","e","preventDefault","axios","post","backendURL","password","current","value","message","then","response","data","id","catch","err","finally","newURL","window","location","href","navigator","clipboard","writeText","showIDComponent","HowItWorks","RedirectToID","idRef","history","useHistory","title","match","push","alert","HomeRoute","GetSecret","props","secretMessage","setSecretMessage","to","GetSecretRoute","params","App","exact","path","component","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b381d518.chunk.js","sourcesContent":["import './CreateSecret.css';\nimport { useRef, useState } from \"react\";\nimport axios from 'axios';\nimport { backendURL } from \"../App\";\n\n\nexport default function CreateSecret() {\n    const [newID, setNewID] = useState();\n    const [loading, setLoading] = useState(false);\n\n    const passwordRef = useRef();\n    const messageRef = useRef();\n\n    const makeSecret = () => {\n        setLoading(true);\n        axios.post(`${backendURL}/v1/secret`, {password: passwordRef.current.value, message: messageRef.current.value})\n            .then((response) => {\n                // success\n                setNewID(response.data.id);\n                passwordRef.current.value = '';\n                messageRef.current.value = '';\n            })\n            .catch((err) => {\n                // failure\n                setNewID(null);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }\n\n    const showIDComponent = () => {\n        if (newID) {\n            const newURL = `${window.location.href}${newID}`;\n\n            // function for copying the url to clipboard\n            const copyToClipboard = () => {\n                navigator.clipboard.writeText(newURL);\n            };\n\n            return (\n                <>\n                    <span>Give this URL to the recipient: </span>\n                    <a href={newURL}>{newURL}</a>\n                    <button type='button' onClick={() => copyToClipboard()}>Copy to Clipboard</button>\n                    <span className='create-instructions'>\n                        This secret will expire in 15 minutes, or when the recipient\n                        reveals the secret.\n                    </span>\n                </>\n            );\n        } else if (newID === null) {\n            // error case\n            return <span>failure</span>\n        } else {\n            return <span></span>\n        }\n    }\n\n    return (\n        <div className='create-secret app-outer-panel'>\n            <form className='create-form app-panel'>\n                <h4>If you want to create a secret...</h4>\n                <label>Secret message (1-100 characters)</label>\n                <textarea maxLength={100} ref={messageRef} type='text' placeholder='What secret do you want to share?'></textarea>\n                <label>Password for secret (3-64 chars)</label>\n                <input ref={passwordRef} type='password' placeholder='Password'></input>\n                <button disabled={loading} type='submit' onClick={(e) => {\n                    e.preventDefault(); // prevents a refresh\n                    makeSecret();\n                }}>{!loading?'Create Secret':'Creating Secret...'}</button>\n\n                {showIDComponent()}\n            </form>\n        </div>\n    );\n}","import './HowItWorks.css';\nexport default function HowItWorks() {\n    return (\n        <section className='how-it-works'>\n            <h4>How does it work?</h4>\n            <p>\n                When you provide a secret message and password, a randomly\n                generated ID is provided to you in the form of a URL. At the\n                same time, a backend server keeps track of that ID along with\n                the information you provided. The password and secret message\n                are both encrypted when stored for security purposes.\n            </p>\n        </section>\n    );\n}\n","import './RedirectToID.css';\nimport { useHistory } from 'react-router-dom';\nimport { useRef } from 'react';\n\nexport default function RedirectToID() {\n    const idRef = useRef();\n    const history = useHistory();\n\n    const idHelperTooltipContent = 'If you were given a URL, the ID of the secret' +\n            ' is the last part of the URL containing letters and numbers. For example,' +\n            ' a URL ending with \"/abc123\" would have the ID of abc123.'\n\n    return (\n        <div className='redirect-to-id app-outer-panel'>\n            <form className='redirect-id-form app-panel'>\n                <h4>If you have an ID of the secret...</h4>\n                <label title={idHelperTooltipContent}>Enter ID of secret</label>\n                <input type='text' title='Only letters and numbers' ref={idRef} placeholder='ID'></input>\n                <button onClick={(e) => {\n                    e.preventDefault();\n                    // input validation, only allow alphanumeric\n                    if (idRef.current.value.match(/^[a-zA-Z0-9]+$/i)) {\n                        history.push(`/${idRef.current.value}`);\n                    } else {\n                        window.alert('This is not an ID. The ID of a secret only contains letters and numbers.');\n                    }\n\n                }}>Go to ID</button>\n            </form>\n        </div>\n    );\n}","import CreateSecret from \"../components/CreateSecret\";\nimport HowItWorks from \"../components/HowItWorks\";\nimport RedirectToID from \"../components/RedirectToID\";\n\n\nexport default function HomeRoute() {\n    return (\n        <>\n            <div className='app-panels-container'>\n                <CreateSecret />\n                <RedirectToID />\n            </div>\n            <HowItWorks />\n        </>\n    );\n}","import './GetSecret.css';\nimport axios from \"axios\";\nimport { useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { backendURL } from \"../App\";\n\nexport default function GetSecret(props) {\n    const [secretMessage, setSecretMessage] = useState(<div></div>);\n    const [loading, setLoading] = useState(false);\n\n    const id = props.id;\n\n    const passwordRef = useRef();\n\n    const handlePasswordSubmit = () => {\n        setLoading(true);\n        axios.post(`${backendURL}/v1/secret/${id}`, {password: passwordRef.current.value})\n            .then((response) => {\n                setSecretMessage(<div>Secret message: {response.data.message}</div>)\n            })\n            .catch(() => {\n                setSecretMessage(<div>Failed</div>);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    };\n\n    return (\n        <div className='get-secret app-outer-panel'>\n            <form className='get-secret-form app-panel'>\n                <h4>Unlocking a secret message</h4>\n                <Link to='/' className='get-secret-back-link'>Go back</Link>\n                <br></br>\n                <label>Please enter in a password for secret ID: <div className='get-secret-id'>{id}</div></label>\n\n                <br></br>\n                <input type='password' ref={passwordRef} placeholder='Password'></input>\n\n                <button disabled={loading} type='submit' onClick={(e) => {\n                    e.preventDefault(); // prevents a refresh\n                    handlePasswordSubmit()\n                }}>{!loading?'Submit':'Loading...'}</button>\n\n                {secretMessage}\n            </form>\n        </div>\n    );\n}","\nimport GetSecret from \"../components/GetSecret\";\n\nexport default function GetSecretRoute(props) {\n    // pass in the id from the path parameter\n    const id = props.match.params.id;\n\n    return (\n        <GetSecret id={id} />\n    );\n}","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\n// import routes\nimport HomeRoute from './routes/HomeRoute';\nimport GetSecretRoute from './routes/GetSecretRoute';\n\n// define the backend server depending on node environment\nexport const backendURL = (process.env.NODE_ENV === 'development')?\n    `http://localhost:3010`:`https://otsecret.herokuapp.com`;\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className='app-body'>\n                \n                {/* Header */}\n                <header className='app-header'>\n                    <h1 className='app-title'>OTSecret</h1>\n                    <h2 className='app-subtitle'>A way to send temporary secrets!</h2>\n                </header>\n\n                {/* Routes */}\n                <div className='app-content'>\n                    <Switch>\n                        <Route exact path='/'>\n                            <HomeRoute />\n                        </Route>\n                        <Route path='/:id' component={GetSecretRoute}>\n                        </Route>\n                    </Switch>\n                </div>\n\n                \n                {/* Footer */}\n                <footer className='app-footer'>\n                    <div>Created by Emmanuel Butor, 2021</div>\n                    <a target='_blank' className='app-footer-icon' href='https://github.com/Emman-B/OTSecret/' rel='noreferrer noopener'>\n                        <i className='devicon-github-original'></i>\n                    </a>\n                </footer>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/CreateSecret.js","routes/HomeRoute.js","components/GetSecret.js","routes/GetSecretRoute.js","App.js","reportWebVitals.js","index.js"],"names":["CreateSecret","useState","newID","setNewID","passwordRef","useRef","messageRef","ref","type","onClick","e","preventDefault","axios","post","backendURL","password","current","value","message","then","response","data","id","catch","err","newURL","window","location","href","showIDComponent","HomeRoute","GetSecret","props","secretMessage","setSecretMessage","to","GetSecretRoute","match","params","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAKe,SAASA,IACpB,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAcC,mBACdC,EAAaD,mBAkCnB,OACI,iCACI,qEACA,uBACA,uBAAOE,IAAKH,EAAaI,KAAK,aAC9B,uBACA,sEACA,uBACA,0BAAUD,IAAKD,EAAYE,KAAK,SAChC,uBACA,wBAAQA,KAAK,SAASC,QAAS,SAACC,GAC5BA,EAAEC,iBA1CVC,IAAMC,KAAN,UAAcC,EAAd,cAAsC,CAACC,SAAUX,EAAYY,QAAQC,MAAOC,QAASZ,EAAWU,QAAQC,QACnGE,MAAK,SAACC,GAEHjB,EAASiB,EAASC,KAAKC,IACvBlB,EAAYY,QAAQC,MAAQ,GAC5BX,EAAWU,QAAQC,MAAQ,MAE9BM,OAAM,SAACC,GAEJrB,EAAS,UAgCb,2BA5BgB,WACpB,GAAID,EAAO,CACP,IAAMuB,EAAM,UAAMC,OAAOC,SAASC,MAAtB,OAA6B1B,GACzC,OACI,qCACI,uBACA,oEACA,mBAAG0B,KAAMH,EAAT,SAAkBA,OAGvB,OAAc,OAAVvB,EAEA,2CAEA,yBAmBN2B,MCvDE,SAASC,IACpB,OACI,cAAC9B,EAAD,ICAO,SAAS+B,EAAUC,GAC9B,MAA0C/B,mBAAS,yBAAnD,mBAAOgC,EAAP,KAAsBC,EAAtB,KAEMZ,EAAKU,EAAMV,GAEXlB,EAAcC,mBAYpB,OACI,iCACI,cAAC,IAAD,CAAM8B,GAAG,IAAT,qBACA,uBACA,+EAAkDb,KAElD,uBACA,uBAAOd,KAAK,WAAWD,IAAKH,IAE5B,wBAAQI,KAAK,SAASC,QAAS,SAACC,GAC5BA,EAAEC,iBAnBVC,IAAMC,KAAN,UAAcC,EAAd,sBAAsCQ,GAAM,CAACP,SAAUX,EAAYY,QAAQC,QACtEE,MAAK,SAACC,GACHc,EAAiB,mDAAsBd,EAASC,KAAKH,eAExDK,OAAM,WACHW,EAAiB,8CAarB,oBAKCD,KCjCE,SAASG,EAAeJ,GAEnC,IAAMV,EAAKU,EAAMK,MAAMC,OAAOhB,GAE9B,OACI,cAACS,EAAD,CAAWT,GAAIA,ICAhB,IAAMR,EAAa,iCAiBXyB,MAdf,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACI,cAACX,EAAD,MAEJ,cAAC,IAAD,CAAOW,KAAK,OAAOC,UAAWN,UCN/BO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bce8337b.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\nimport axios from 'axios';\nimport { backendURL } from \"../App\";\n\n\nexport default function CreateSecret() {\n    const [newID, setNewID] = useState();\n\n    const passwordRef = useRef();\n    const messageRef = useRef();\n\n    const makeSecret = () => {\n        axios.post(`${backendURL}/v1/secret`, {password: passwordRef.current.value, message: messageRef.current.value})\n            .then((response) => {\n                // success\n                setNewID(response.data.id);\n                passwordRef.current.value = '';\n                messageRef.current.value = '';\n            })\n            .catch((err) => {\n                // failure\n                setNewID(null);\n            });\n    }\n\n    const showIDComponent = () => {\n        if (newID) {\n            const newURL = `${window.location.href}${newID}`\n            return (\n                <>\n                    <br></br>\n                    <span>Give this URL to the recipient: </span>\n                    <a href={newURL}>{newURL}</a>\n                </>\n            );\n        } else if (newID === null) {\n            // error case\n            return <span>failure</span>\n        } else {\n            return <span></span>\n        }\n    }\n\n    return (\n        <form>\n            <label>Password for secret (3-64 chars)</label>\n            <br></br>\n            <input ref={passwordRef} type='password'></input>\n            <br></br>\n            <label>Secret message (1-100 characters)</label>\n            <br></br>\n            <textarea ref={messageRef} type='text'></textarea>\n            <br></br>\n            <button type='submit' onClick={(e) => {\n                e.preventDefault(); // prevents a refresh\n                makeSecret();\n            }}>Create secret</button>\n\n            {showIDComponent()}\n        </form>\n    );\n}","import CreateSecret from \"../components/CreateSecret\";\n\n\nexport default function HomeRoute() {\n    return (\n        <CreateSecret />\n    );\n}","import axios from \"axios\";\nimport { useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { backendURL } from \"../App\";\n\nexport default function GetSecret(props) {\n    const [secretMessage, setSecretMessage] = useState(<div></div>);\n\n    const id = props.id;\n\n    const passwordRef = useRef();\n\n    const handlePasswordSubmit = () => {\n        axios.post(`${backendURL}/v1/secret/${id}`, {password: passwordRef.current.value})\n            .then((response) => {\n                setSecretMessage(<div>Secret message: {response.data.message}</div>)\n            })\n            .catch(() => {\n                setSecretMessage(<div>Failed</div>);\n            });\n    };\n\n    return (\n        <form>\n            <Link to='/'>Go back</Link>\n            <br></br>\n            <label>Please enter in a password for secret ID: {id}</label>\n\n            <br></br>\n            <input type='password' ref={passwordRef}></input>\n\n            <button type='submit' onClick={(e) => {\n                e.preventDefault(); // prevents a refresh\n                handlePasswordSubmit()\n            }}>Submit</button>\n\n            {secretMessage}\n        </form>\n    );\n}","\nimport GetSecret from \"../components/GetSecret\";\n\nexport default function GetSecretRoute(props) {\n    // pass in the id from the path parameter\n    const id = props.match.params.id;\n\n    return (\n        <GetSecret id={id} />\n    );\n}","import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\n// import routes\nimport HomeRoute from './routes/HomeRoute';\nimport GetSecretRoute from './routes/GetSecretRoute';\n\n// define the backend server depending on node environment\nexport const backendURL = (process.env.NODE_ENV === 'development')?\n    `http://localhost:3010`:`https://otsecret.herokuapp.com`;\n\nfunction App() {\n    return (\n        <HashRouter>\n            <Switch>\n                <Route exact path='/'>\n                    <HomeRoute />\n                </Route>\n                <Route path='/:id' component={GetSecretRoute}>\n                </Route>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}